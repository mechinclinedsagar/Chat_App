SQL:


Step-1:

=================================================================================

Create two tables login and message

login has columns person, username and password
message has columns sender_id, receiver_id, msgs and msg_time


==================================================================================


CREATE TABLE LoginTb (
	person VARCHAR(26) NOT NULL,
    username VARCHAR(10) NOT NULL,
    passwrd VARCHAR(10) NOT NULL,
);



CREATE TABLE messageTbl (
 
    sender_id VARCHAR(10) NOT NULL,
    receiver_id VARCHAR(10) NOT NULL,
    msgs TEXT,
    msg_time DATETIME DEFAULT CURRENT_TIMESTAMP
);

select * from LoginTb;

select * from messageTbl;

***************************************************************************************************************************************************************************************************
***************************************************************************************************************************************************************************************************

WEB API:

Step-2:

=================================================================================

1. Create a web api project 
2. Then from this project add a new project for crud operations which it is a library
3. use this library in the web api project 
4. After creating the library, using connection string we connect to our database and perform some operations on the table by writing functions here in the library
5. Add this librrary as reference in the web api project 
6. Add an API controller and use the functions defined in the library to do operations on the table.


==================================================================================

CRUD.cs

--------------------------

using System;
using System.Data;
using System.Data.SqlClient;

namespace CRUD_ADO
{
    public class CRUD
    {
        public static Boolean chkValidity(string uname, string pass)
        {
            try
            {
                SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-O7LF2JA;Initial Catalog=training;Integrated Security=True");
                con.Open();
                SqlCommand cmd = new SqlCommand("Select * from LoginTb", con);
                cmd.CommandType = CommandType.Text;
                SqlDataReader rdr = cmd.ExecuteReader();
                while (rdr.Read())
                {
                    if (rdr.GetString("username").Equals(uname) && rdr.GetString("passwrd").Equals(pass))
                        return true;
                }

            }
            catch (Exception e) { return false; }
            return false;
        }

        public static bool AddUser(string name, string uname, string pass)
        {
            try
            {
                SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-O7LF2JA;Initial Catalog=training;Integrated Security=True");
                con.Open();
                SqlCommand cmd = new SqlCommand($"INSERT INTO LoginTb (person, username, passwrd) VALUES ('{name}', '{uname}', '{pass}')", con);
                int rowsAffected = cmd.ExecuteNonQuery();
                con.Close();
                return rowsAffected > 0;
            }
            catch (Exception e)
            {
                return false;
            }
        }

        public static string SendMessage(string uname, string pass, string rname, string message)
        {
            try
            {
                SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-O7LF2JA;Initial Catalog=training;Integrated Security=True");
                con.Open();

                // Check if sender's credentials are valid
                if (!chkValidity(uname, pass))
                {
                    return "Sender credentials are not valid.";
                }

                // Check if the receiver's username exists in the database
                SqlCommand checkReceiverCmd = new SqlCommand($"SELECT COUNT(*) FROM LoginTb WHERE username = '{rname}'", con);
                int receiverCount = (int)checkReceiverCmd.ExecuteScalar();

                if (receiverCount == 0)
                {
                    return "Receiver does not exist.";
                }

                // Insert the message into the messageTb table
                SqlCommand insertMessageCmd = new SqlCommand($"INSERT INTO messageTbl (sender_id, receiver_id, msgs) VALUES  ('{uname}', '{rname}', '{message}')", con);

                int rowsAffected = insertMessageCmd.ExecuteNonQuery();
                con.Close();

                if (rowsAffected > 0)
                    return "Message sent";
                return "Failed to send message";
            }
            catch (Exception e)
            {
                return e.Message;
            }
        }

    }
}

*****************************************************************************************************

DESCRIPTION: 

This code is a C# class named CRUD that appears to be related to a simple implementation of Create, Read, Update, and Delete (CRUD) operations in the context of a user login and message sending system. Let's break down the different methods and their functionality in the code:

chkValidity Method:

This method is intended to check the validity of a user's credentials by comparing the provided uname (username) and pass (password) with records in a SQL Server database.
It establishes a connection to the database, retrieves data from the "LoginTb" table, and iterates through the records to find a match.
If valid credentials are found, it returns true; otherwise, it returns false.
AddUser Method:

This method is used to add a new user to the system.
It takes the user's name (name), username (uname), and password (pass) as input parameters.
It inserts a new record into the "LoginTb" table in the database with the provided user information.
If the insertion is successful, it returns true; otherwise, it returns false.
SendMessage Method:

This method is intended to send a message from one user to another.
It takes the sender's username (uname), sender's password (pass), receiver's username (rname), and the message text (message) as input parameters.
It performs several checks:
It checks if the sender's credentials are valid by calling the chkValidity method.
It checks if the receiver's username exists in the "LoginTb" table in the database.
If both sender and receiver checks pass, it inserts a new message record into the "messageTbl" table in the database.
If the message insertion is successful, it returns "Message sent"; otherwise, it returns "Failed to send message." If any exception occurs during the process, it returns the error message.

==================================================================================


ChatController.cs

--------------------------------



using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;

namespace Chat_App.Controllers
{
    [Produces("application/json")]
    [Route("api/[controller]")]
    [ApiController]
    public class ChatController : ControllerBase
    {
        [HttpGet]
        public ActionResult<string> Login(string uname, string pass)
        {
            if (CRUD_ADO.CRUD.chkValidity(uname, pass))
            {
                return "Login successful";
            }
            return "Username or password not found. Register to log in";
        }

        [HttpGet("AddUser")]
        public ActionResult<string> AddUser(string name, string uname, string pass)
        {
            if (CRUD_ADO.CRUD.AddUser(name, uname, pass))
            {
                return "User added successfully";
            }
            return "Failed to add user";
        }
        [HttpGet("SendMessage")]
        public ActionResult<string> SendMessage(string uname, string pass, string rname, string message)
        {
            string Message = CRUD_ADO.CRUD.SendMessage(uname, pass, rname, message);
            return Message;
        }
    }
}


***************************************************************************************************************************************************************************************************

DESCRIPTION: 

The code provided here, is a C# class named ChatController intended for use in an ASP.NET Core web application. There is a controller class for handling HTTP requests related to user login and sending messages in a chat application. Here's a description of the code:

Attribute Decorations:

[Produces("application/json")]: This attribute specifies that the controller should produce JSON responses by default.
[Route("api/[controller]")]: This attribute defines the route for the controller, where [controller] is a placeholder for the controller's name.
[ApiController]: This attribute indicates that this class is an API controller, allowing for automatic HTTP status code responses.
Endpoints:

The ChatController class defines three HTTP endpoints using the [HttpGet] attribute.
a. Login Endpoint:

URL: /api/Chat/Login
Parameters: uname (username) and pass (password).
When accessed via an HTTP GET request, it checks the validity of the provided username and password by calling the CRUD_ADO.CRUD.chkValidity method. If valid, it returns "Login successful"; otherwise, it returns "Username or password not found. Register to log in."
b. AddUser Endpoint:

URL: /api/Chat/AddUser
Parameters: name (user's name), uname (username), and pass (password).
When accessed via an HTTP GET request, it attempts to add a new user to the system by calling the CRUD_ADO.CRUD.AddUser method. If the user is added successfully, it returns "User added successfully"; otherwise, it returns "Failed to add user."
c. SendMessage Endpoint:

URL: /api/Chat/SendMessage
Parameters: uname (sender's username), pass (sender's password), rname (receiver's username), and message (the message to be sent).
When accessed via an HTTP GET request, it calls the CRUD_ADO.CRUD.SendMessage method to send a message. The result (either "Message sent" or "Failed to send message") is returned as the response.

As this code is designed for a simple chat application and follows the RESTful conventions for defining API endpoints. It relies on the CRUD_ADO.CRUD class, which is presumably responsible for interacting with a database to perform operations like user authentication, user registration, and sending messages. 
***************************************************************************************************************************************************************************************************


Step-3


1. From swagger copy the url's
2. Using these url's we can connect WEB API and angular


***************************************************************************************************************************************************************************************************

DESCRIPTION:



Obtaining URLs from Swagger:

Swagger is a tool for documenting and testing APIs. It generates a user-friendly interface that allows us to explore and test our API. When we open our API in Swagger, it provides a list of endpoints and their corresponding URLs.

In the context of the provided code, Swagger likely generated URLs for the three endpoints in our ChatController. We can access these URLs by running our ASP.NET Core application and navigating to the Swagger documentation page. 
Connecting the Web API to Angular:

To connect our Angular application to the Web API using the Swagger-generated URLs, we can follow these steps:
a. Create an Angular Service: In our Angular application, create a service that will be responsible for making HTTP requests to the Web API. We can use Angular's HttpClient module for this purpose.

b. Use HttpClient for API Requests: Within our Angular service, use the HttpClient to make HTTP GET requests to the URLs obtained from Swagger. We've used these URLs as the base URLs for our API requests.

c. Subscribe to the Observables: When we make API requests, we have got observables as responses. Subscribe to these observables to handle the API responses, and take appropriate actions based on the data or errors received.

d. Display API Data: Once we receive data from the API, we can display it in our Angular components by binding it to the UI elements. We can use Angular templates and data-binding to display the data to users.
***************************************************************************************************************************************************************************************************


Step-4


1. Created a new folder for this application
2. using "ng new <filename>" command created a folder where we work with angular
3. then using "ng serve" started the application



URL's

------

login:

https://localhost:44374/api/Chat?uname=siri&pass=siri1234

register:

https://localhost:44374/api/Chat/AddUser?name=Monica&uname=gupta&pass=Moni123

msg:

https://localhost:44374/api/Chat/SendMessage?uname=siri&pass=siri1234&rname=gupta&message=Good%20morning%20mam


***********************************************************************************************************

DESCRIPTION: 
Based on the provided URLs, it appears we've successfully started our Angular application and are attempting to connect to a Web API built with ASP.NET Core. Let's describe the URLs and how they relate to the previous codes:

Login URL:

URL: https://localhost:44374/api/Chat?uname=siri&pass=siri1234
This URL corresponds to the Login endpoint of the ChatController. It is used for user authentication.
The uname and pass query parameters are used to provide the username and password for authentication.
Register URL:

URL: https://localhost:44374/api/Chat/AddUser?name=Monica&uname=gupta&pass=Moni123
This URL corresponds to the AddUser endpoint of the ChatController. It is used for user registration.
The name, uname, and pass query parameters are used to provide the user's name, username, and password for registration.
Message URL:

URL: https://localhost:44374/api/Chat/SendMessage?uname=siri&pass=siri1234&rname=gupta&message=Good%20morning%20mam
This URL corresponds to the SendMessage endpoint of the ChatController. It is used to send messages between users in the chat application.
The uname, pass, rname, and message query parameters are used to specify the sender's username, sender's password, receiver's username, and the message text.
In the context of our Angular application, we can make HTTP requests to these URLs using the Angular HttpClient module. We can create services that make GET requests to these endpoints with the appropriate query parameters.
