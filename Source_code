SQL:


Step-1:

=================================================================================

Create two tables login and message

login has columns person, username and password
message has columns sender_id, receiver_id, msgs and msg_time


==================================================================================


CREATE TABLE LoginTb (
	person VARCHAR(26) NOT NULL,
    username VARCHAR(10) NOT NULL,
    passwrd VARCHAR(10) NOT NULL,
);



CREATE TABLE messageTbl (
 
    sender_id VARCHAR(10) NOT NULL,
    receiver_id VARCHAR(10) NOT NULL,
    msgs TEXT,
    msg_time DATETIME DEFAULT CURRENT_TIMESTAMP
);

select * from LoginTb;

select * from messageTbl;

***************************************************************************************************************************************************************************************************
***************************************************************************************************************************************************************************************************

WEB API:

Step-2:

=================================================================================

1. Create a web api project 
2. Then from this project add a new project for crud operations which it is a library
3. use this library in the web api project 
4. After creating the library, using connection string we connect to our database and perform some operations on the table by writing functions here in the library
5. Add this librrary as reference in the web api project 
6. Add an API controller and use the functions defined in the library to do operations on the table.


==================================================================================

CRUD.cs

--------------------------

using System;
using System.Data;
using System.Data.SqlClient;

namespace CRUD_ADO
{
    public class CRUD
    {
        public static Boolean chkValidity(string uname, string pass)
        {
            try
            {
                SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-O7LF2JA;Initial Catalog=training;Integrated Security=True");
                con.Open();
                SqlCommand cmd = new SqlCommand("Select * from LoginTb", con);
                cmd.CommandType = CommandType.Text;  // to explicitly set the com,mand type as text
                SqlDataReader rdr = cmd.ExecuteReader();  // provides a one way stream.
                while (rdr.Read())  //A data reader is part of the ADO.NET library and is often used to read data from a database.
                {
                    if (rdr.GetString("username").Equals(uname) && rdr.GetString("passwrd").Equals(pass))
                        return true;
                }

            }
            catch (Exception e) { return false; }
            return false;
        }

        public static bool AddUser(string name, string uname, string pass)
        {
            try
            {
                SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-O7LF2JA;Initial Catalog=training;Integrated Security=True");
                con.Open();
                SqlCommand cmd = new SqlCommand($"INSERT INTO LoginTb (person, username, passwrd) VALUES ('{name}', '{uname}', '{pass}')", con);
                int rowsAffected = cmd.ExecuteNonQuery();
                con.Close();
                return rowsAffected > 0;
            }
            catch (Exception e)
            {
                return false;
            }
        }

        public static string SendMessage(string uname, string pass, string rname, string message)
        {
            try
            {
                SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-O7LF2JA;Initial Catalog=training;Integrated Security=True");
                con.Open();

                // Check if sender's credentials are valid
                if (!chkValidity(uname, pass))
                {
                    return "Sender credentials are not valid.";
                }

                // Check if the receiver's username exists in the database
                SqlCommand checkReceiverCmd = new SqlCommand($"SELECT COUNT(*) FROM LoginTb WHERE username = '{rname}'", con);
                int receiverCount = (int)checkReceiverCmd.ExecuteScalar();

                if (receiverCount == 0)
                {
                    return "Receiver does not exist.";
                }

                // Insert the message into the messageTb table
                SqlCommand insertMessageCmd = new SqlCommand($"INSERT INTO messageTbl (sender_id, receiver_id, msgs) VALUES  ('{uname}', '{rname}', '{message}')", con);

                int rowsAffected = insertMessageCmd.ExecuteNonQuery();
                con.Close();

                if (rowsAffected > 0)
                    return "Message sent";
                return "Failed to send message";
            }
            catch (Exception e)
            {
                return e.Message;
            }
        }

    }
}

*****************************************************************************************************

DESCRIPTION: 

This code is a C# class named CRUD that appears to be related to a simple implementation of Create, Read, Update, and Delete (CRUD) operations in the context of a user login and message sending system. Let's break down the different methods and their functionality in the code:

chkValidity Method:

This method is intended to check the validity of a user's credentials by comparing the provided uname (username) and pass (password) with records in a SQL Server database.
It establishes a connection to the database, retrieves data from the "LoginTb" table, and iterates through the records to find a match.
If valid credentials are found, it returns true; otherwise, it returns false.
AddUser Method:

This method is used to add a new user to the system.
It takes the user's name (name), username (uname), and password (pass) as input parameters.
It inserts a new record into the "LoginTb" table in the database with the provided user information.
If the insertion is successful, it returns true; otherwise, it returns false.
SendMessage Method:

This method is intended to send a message from one user to another.
It takes the sender's username (uname), sender's password (pass), receiver's username (rname), and the message text (message) as input parameters.
It performs several checks:
It checks if the sender's credentials are valid by calling the chkValidity method.
It checks if the receiver's username exists in the "LoginTb" table in the database.
If both sender and receiver checks pass, it inserts a new message record into the "messageTbl" table in the database.
If the message insertion is successful, it returns "Message sent"; otherwise, it returns "Failed to send message." If any exception occurs during the process, it returns the error message.

==================================================================================


ChatController.cs

--------------------------------



using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;

namespace Chat_App.Controllers
{
    [Produces("application/json")]        
// In the code you provided, the [Produces("application/json")] attribute is used to specify the content type that the action method of the ChatController will produce in its responses. 
// In this case, it indicates that the action methods in the ChatController will produce JSON responses.
  

[Route("api/[controller]")]


    [ApiController]
    public class ChatController : ControllerBase
    {
        [HttpGet]
        public ActionResult<string> Login(string uname, string pass)
        {
            if (CRUD_ADO.CRUD.chkValidity(uname, pass))
            {
                return "Login successful";
            }
            return "Username or password not found. Register to log in";
        }

        [HttpGet("AddUser")]
        public ActionResult<string> AddUser(string name, string uname, string pass)
        {
            if (CRUD_ADO.CRUD.AddUser(name, uname, pass))
            {
                return "User added successfully";
            }
            return "Failed to add user";
        }
        [HttpGet("SendMessage")]
        public ActionResult<string> SendMessage(string uname, string pass, string rname, string message)
        {
            string Message = CRUD_ADO.CRUD.SendMessage(uname, pass, rname, message);
            return Message;
        }
    }
}


***************************************************************************************************************************************************************************************************

DESCRIPTION: 

The code provided here, is a C# class named ChatController intended for use in an ASP.NET Core web application. There is a controller class for handling HTTP requests related to user login and sending messages in a chat application. Here's a description of the code:

Attribute Decorations:

[Produces("application/json")]: This attribute specifies that the controller should produce JSON responses by default.
[Route("api/[controller]")]: This attribute defines the route for the controller, where [controller] is a placeholder for the controller's name.
[ApiController]: This attribute indicates that this class is an API controller, allowing for automatic HTTP status code responses.
Endpoints:

The ChatController class defines three HTTP endpoints using the [HttpGet] attribute.
a. Login Endpoint:

URL: /api/Chat/Login
Parameters: uname (username) and pass (password).
When accessed via an HTTP GET request, it checks the validity of the provided username and password by calling the CRUD_ADO.CRUD.chkValidity method. If valid, it returns "Login successful"; otherwise, it returns "Username or password not found. Register to log in."
b. AddUser Endpoint:

URL: /api/Chat/AddUser
Parameters: name (user's name), uname (username), and pass (password).
When accessed via an HTTP GET request, it attempts to add a new user to the system by calling the CRUD_ADO.CRUD.AddUser method. If the user is added successfully, it returns "User added successfully"; otherwise, it returns "Failed to add user."
c. SendMessage Endpoint:

URL: /api/Chat/SendMessage
Parameters: uname (sender's username), pass (sender's password), rname (receiver's username), and message (the message to be sent).
When accessed via an HTTP GET request, it calls the CRUD_ADO.CRUD.SendMessage method to send a message. The result (either "Message sent" or "Failed to send message") is returned as the response.

As this code is designed for a simple chat application and follows the RESTful conventions for defining API endpoints. It relies on the CRUD_ADO.CRUD class, which is presumably responsible for interacting with a database to perform operations like user authentication, user registration, and sending messages. 
***************************************************************************************************************************************************************************************************


Step-3


1. From swagger copy the url's
2. Using these url's we can connect WEB API and angular


***************************************************************************************************************************************************************************************************

DESCRIPTION:



Obtaining URLs from Swagger:

Swagger is a tool for documenting and testing APIs. It generates a user-friendly interface that allows us to explore and test our API. When we open our API in Swagger, it provides a list of endpoints and their corresponding URLs.

In the context of the provided code, Swagger likely generated URLs for the three endpoints in our ChatController. We can access these URLs by running our ASP.NET Core application and navigating to the Swagger documentation page. 
Connecting the Web API to Angular:

To connect our Angular application to the Web API using the Swagger-generated URLs, we can follow these steps:
a. Create an Angular Service: In our Angular application, create a service that will be responsible for making HTTP requests to the Web API. We can use Angular's HttpClient module for this purpose.

b. Use HttpClient for API Requests: Within our Angular service, use the HttpClient to make HTTP GET requests to the URLs obtained from Swagger. We've used these URLs as the base URLs for our API requests.

c. Subscribe to the Observables: When we make API requests, we have got observables as responses. Subscribe to these observables to handle the API responses, and take appropriate actions based on the data or errors received.

d. Display API Data: Once we receive data from the API, we can display it in our Angular components by binding it to the UI elements. We can use Angular templates and data-binding to display the data to users.
***************************************************************************************************************************************************************************************************


Step-4


1. Created a new folder for this application
2. using "ng new <filename>" command created a folder where we work with angular
3. then using "ng serve" started the application



URL's

------

login:

https://localhost:44374/api/Chat?uname=siri&pass=siri1234

register:

https://localhost:44374/api/Chat/AddUser?name=Monica&uname=gupta&pass=Moni123

msg:

https://localhost:44374/api/Chat/SendMessage?uname=siri&pass=siri1234&rname=gupta&message=Good%20morning%20mam


***********************************************************************************************************

DESCRIPTION: 
Based on the provided URLs, it appears we've successfully started our Angular application and are attempting to connect to a Web API built with ASP.NET Core. Let's describe the URLs and how they relate to the previous codes:

Login URL:

URL: https://localhost:44374/api/Chat?uname=siri&pass=siri1234
This URL corresponds to the Login endpoint of the ChatController. It is used for user authentication.
The uname and pass query parameters are used to provide the username and password for authentication.
Register URL:

URL: https://localhost:44374/api/Chat/AddUser?name=Monica&uname=gupta&pass=Moni123
This URL corresponds to the AddUser endpoint of the ChatController. It is used for user registration.
The name, uname, and pass query parameters are used to provide the user's name, username, and password for registration.
Message URL:

URL: https://localhost:44374/api/Chat/SendMessage?uname=siri&pass=siri1234&rname=gupta&message=Good%20morning%20mam
This URL corresponds to the SendMessage endpoint of the ChatController. It is used to send messages between users in the chat application.
The uname, pass, rname, and message query parameters are used to specify the sender's username, sender's password, receiver's username, and the message text.
In the context of our Angular application, we can make HTTP requests to these URLs using the Angular HttpClient module. We can create services that make GET requests to these endpoints with the appropriate query parameters.




***************************************************************************************************************************************************************************************************
***************************************************************************************************************************************************************************************************


Step-5

1. to generate a service use command "ng generate service <servicename>"
2. then change service.ts, app.module.ts, app.component.ts and app.component.html accordingly


=======================================================


chat.service.ts

--------------------


import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ChatService {

  constructor(private httpClient:HttpClient) { }
  
  getPosts(uname: string, pass: string): Observable<any[]> {
    return this.httpClient.get<any[]>(`https://localhost:44374/api/Chat?uname=${uname}&pass=${pass}`);
  }

  getPosts1(name: string, uname: string, pass: string): Observable<any[]> {
    return this.httpClient.get<any[]>(`https://localhost:44374/api/Chat/AddUser?name=${name}&uname=${uname}&pass=${pass}`);
  }

  getPosts2(uname: string, rname: string, msg: string): Observable<any[]> {
    return this.httpClient.get<any[]>(`https://localhost:44374/api/Chat/SendMessage?uname=${uname}&rname=${rname}&message=${msg}`);
  }
}

***********************************************************************************************************************************************
DESCRIPTION:

The code we've provided is an Angular service named ChatService. This service is designed to interact with a backend Web API, making HTTP GET requests to specific endpoints. Here's a description of the code:

Import Statements:

The service imports required modules from Angular, including HttpClient for making HTTP requests and Observable for handling asynchronous data.
Service Decoration:

The @Injectable decorator is used to indicate that this service can be injected into other Angular components or services.
Constructor:

The constructor injects the HttpClient into the service, allowing it to make HTTP requests to the specified URLs.
Methods:

getPosts(uname: string, pass: string): This method makes an HTTP GET request to the specified URL, which appears to be an authentication endpoint. It takes a username (uname) and password (pass) as parameters and returns an Observable of type any[]. The response is expected to contain an array of data.

getPosts1(name: string, uname: string, pass: string): This method makes an HTTP GET request to another URL, which appears to be for user registration. It takes the user's name (name), username (uname), and password (pass) as parameters and returns an Observable of type any[].

getPosts2(uname: string, rname: string, msg: string): This method makes an HTTP GET request to yet another URL, seemingly for sending messages in a chat application. It takes the sender's username (uname), receiver's username (rname), and the message text (msg) as parameters and returns an Observable of type any[].

Overall, this service is designed for making HTTP GET requests to specific endpoints of our backend API.
=============================================================================================================================================================


app.module.ts

-------------------------

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';

import { ChatService } from './chat.service';
import { HttpClientModule } from '@angular/common/http';
import { FormsModule } from '@angular/forms';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule,
    FormsModule
  ],
  providers: [ChatService],
  bootstrap: [AppComponent]
})
export class AppModule { }

**************************************************************************************************************************************************
DESCRIPTION: 
The provided code is the app.module.ts file in an Angular application. This file is a critical part of the Angular application's configuration and is used to set up the application's modules, components, services, and other dependencies. Let's break down and describe the key elements of this code:

Imports:

This code begins by importing various modules and components required for the Angular application. These imports are used to make external functionality available within the application.

NgModule is imported from @angular/core. It's a decorator and module for defining an Angular module.

BrowserModule is imported from @angular/platform-browser. It provides essential services and directives for working with web browsers.

AppRoutingModule is imported from an external file (presumably defined in our project) and is used for routing configuration.

AppComponent is the root component of the application, and it's also imported from an external file.

ChatService is imported from an external file. This service might be used to communicate with the backend API.

HttpClientModule is imported from @angular/common/http. It provides Angular HTTP client services for making HTTP requests to external resources, including RESTful APIs.

FormsModule is imported from @angular/forms. It provides support for forms and form-related features in Angular applications.

NgModule Decorator:

The @NgModule decorator is used to define and configure the Angular module. It accepts an object with various properties that define the module's characteristics.

declarations: An array that contains the components, directives, and pipes that belong to this module. In this code, there's one component, which is AppComponent.

imports: An array of other modules that are imported and used within this module. In this case, it includes BrowserModule, AppRoutingModule, HttpClientModule, and FormsModule.

providers: An array of services that should be available throughout the application. Here, it includes the ChatService, suggesting that this service can be used throughout the application.

bootstrap: This property specifies the root component of the application. In this case, it's set to AppComponent, which means that the Angular application will start by rendering the AppComponent in the browser.

Export Class AppModule:

The AppModule class is exported, making it available for use elsewhere in the application.
In summary, this code configures the main Angular module for our application. It sets up the necessary imports, declarations, and providers. It also includes the ChatService, which implies that this service can be injected into components or other parts of the application. The AppRoutingModule is used for routing configuration, and the FormsModule and HttpClientModule are imported to enable form handling and HTTP requests, respectively. The AppComponent is the root component of the application.



=============================================================================================================================================================


app.component.ts

--------------------------------

import { Component, OnInit } from '@angular/core';
import { ChatService } from './chat.service';
import { HttpClientModule } from '@angular/common/http';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit{
  public status: string="";
  public status1: string="";
  public status2: string="";
  public uname: string = "";
  public pass: string = "";
  public name: string = "";
  public rname: string = "";
  public msg: string = "";
  public isRegister: boolean = false;
  public isLoggedIn: boolean = false;
  public messages: any[] = []; 
  public currentUser: string = ""; 

  constructor(private chat: ChatService) { 
    
  }

  ngOnInit() { }

  onRegister() {
    this.chat.getPosts1(this.name, this.uname, this.pass).subscribe((stat: any) => {
      this.status1 = stat;
      console.log(stat);
    });
  }

  onLogin() {
    this.chat.getPosts(this.uname, this.pass).subscribe((stat: any) => {
      this.status = stat;
      if(this.status == "Login successful")
      {
        this.isLoggedIn = true;
      }
      console.log(stat);
    });
  }

  toggleForm() {
    this.isRegister = !this.isRegister;
    this.name = "";
    this.uname = "";
    this.pass = "";
  }

  onSend() {
    this.chat.getPosts2(this.uname, this.rname, this.msg).subscribe((stat: any) => {
      this.status2 = stat;
      console.log(stat);
       if (stat !== 'Receiver does not exist.') {
        this.messages.push({
          sender: this.uname,
          receiver: this.rname,
          text: this.msg,
        });
      }
      this.rname = '';
      this.msg = '';
    });
  }

  onLogout() {
    this.isLoggedIn = false;
    this.status = "";
  }

}






*********************************************************************************************************************************
DESCRIPTION: 
The provided code is the app.component.ts file in an Angular application. This file defines the behavior and logic for the root component of the application. Let's break down and describe the key elements of this code:

Imports:

The code starts with import statements for necessary modules and dependencies.

Component and OnInit are imported from @angular/core. Component is used for creating Angular components, and OnInit is an Angular lifecycle hook that indicates that the component should implement the ngOnInit method.

ChatService is imported from an external file, presumably a service used for making HTTP requests to the backend API.

HttpClientModule is incorrectly imported in this file. The HttpClientModule should be imported in the app.module.ts file, not in individual component files.

Component Decorator:

The @Component decorator is used to define metadata for the component. It includes the selector, template URL, and style URLs.

selector: Specifies the component's HTML selector. In this case, it's 'app-root', which means this component will be rendered in an HTML element with the tag <app-root>.

templateUrl: Specifies the path to the HTML template file for this component.

styleUrls: An array of URLs pointing to CSS style files for this component.

Component Class:

The AppComponent class is defined and implements the OnInit interface.

Properties are declared for the component, including:

status: A string to store the status or response from API calls.
uname, pass, name, rname, and msg: Strings to store user input values.
isRegister: A boolean flag to toggle between login and registration forms.
The constructor of the class takes a ChatService as a parameter. This service is presumably used to make HTTP requests to the API.

The ngOnInit method is implemented but left empty. It's called when the component is initialized.

Several methods are defined for different actions:

onRegister(): Calls the getPosts1 method of the ChatService to perform user registration.
onLogin(): Calls the getPosts method of the ChatService to perform user login.
toggleForm(): Toggles the registration form by changing the value of the isRegister property.
onSend(): Calls the getPosts2 method of the ChatService to send a message.
Inside each method, an HTTP request is made using the ChatService. The response is stored in the status property and logged to the console.

In summary, this code defines the behavior and logic for the root component of the Angular application. It includes methods for user registration, login, sending messages, and toggling between registration and login forms. The ChatService is used to make HTTP requests to interact with the backend API.

=============================================================================================================================================================


app.component.html

-----------------------------


<div class="background-container">
  <div *ngIf="isLoggedIn" class="container">
    <h2>Group chat</h2>
    <h4>{{status2}}</h4>
    <div class="chatbox">
      <div class="message" *ngFor="let message of messages">
        <div class="sender" *ngIf="message.sender !== currentUser">{{ message.sender }}</div>
        <div class="receiver" *ngIf="message.sender === currentUser">{{ message.receiver }}</div>
        <div class="receiver" *ngIf="message.receiver === currentUser">{{ message.sender }}</div>
        <div class="text">{{ message.text }}</div>
      </div>
    </div>
    <form (ngSubmit)="onSend()" class="form-container">
      Receiver Username:
      <input type="text" id="rname" name="rname" [(ngModel)]="rname"><br><br>
      Message:
      <input type="text" id="msg" name="msg" [(ngModel)]="msg"><br><br>
      <button type="submit">Send</button><br><br>
    </form>
    <button (click)="onLogout()">Log out</button>
  </div>

  <div *ngIf="!isLoggedIn" class="container">
    <div *ngIf="isRegister">
      <h2>Register to connect</h2>
      <div class="box">
        <h4>{{status1}}</h4>
        <form (ngSubmit)="onRegister()" class="form-container">
          Name:
          <input type="text" id="name" name="name" [(ngModel)]="name"><br><br>
          Username:
          <input type="text" id="uname" name="uname" [(ngModel)]="uname"><br><br>
          Password:
          <input type="text" id="pass" name="pass" [(ngModel)]="pass"><br><br>
          <button type="submit">Register</button><br><br>
        </form>
        <button (click)="toggleForm()">Login</button>
      </div>
    </div>

    <div *ngIf="!isRegister" class="container">
      <h2>TryChat</h2>
      <div class="box">
        <h4>{{status}}</h4>
        <form (ngSubmit)="onLogin()" class="form-container">
          Username:
          <input type="text" id="uname" name="uname" [(ngModel)]="uname"><br><br>
          Password:
          <input type="text" id="pass" name="pass" [(ngModel)]="pass"><br><br>
          <button type="submit">Login</button><br><br>
        </form>
        <button (click)="toggleForm()">Register</button>
      </div>
    </div>
  </div>
</div>



****************************************************************************************************
DESCRIPTION: 
The provided code is an Angular component template defined in the app.component.html file. It specifies the HTML structure and user interface for the root component of our Angular application. Let's break down and explain the code:

Conditional Rendering:

The template makes use of the Angular structural directive *ngIf to conditionally render different sections of the form based on the value of the isRegister property.
Registration Form Section:

When isRegister is true, the registration form is displayed.
<h2>Register Form</h2>: A heading indicating that this is the registration form.
<form (ngSubmit)="onRegister()">: A form element that triggers the onRegister method when submitted.
Input fields for the user's name, username, and password, along with two-way data binding using [(ngModel)]. This means that any changes in the input fields will update the corresponding component properties (name, uname, and pass).
A "Register" button to submit the registration form.
A button labeled "Login" that, when clicked, triggers the toggleForm() method to switch to the login form.
Login Form Section:

When isRegister is false, the login form is displayed.
<h2>Login Form</h2>: A heading indicating that this is the login form.
<form (ngSubmit)="onLogin()">: A form element that triggers the onLogin method when submitted.
Input fields for the username and password, with two-way data binding.
A "Login" button to submit the login form.
A button labeled "Register" that, when clicked, triggers the toggleForm() method to switch to the registration form.
Status Display:

<h4>{{status}}</h4>: A section to display the status or response message from the API calls. The value is bound to the status property in the component class, which is updated when API requests are made.
Event Handling:

Event handlers are defined using Angular event binding and method calls. For example, (ngSubmit)="onRegister()" specifies that the onRegister() method is called when the form is submitted.
Toggling Between Forms:

The "Login" and "Register" buttons at the end of each form trigger the toggleForm() method, which switches between the registration and login forms by toggling the value of the isRegister property.
In summary, this HTML template provides a simple user interface for user registration and login in our Angular application. Users can toggle between the registration and login forms, fill out the required information, submit the forms, and receive status messages based on the API responses. The ChatService is used to make API requests and handle the responses, updating the status property to provide feedback to the user.
*************************************************************************************************


app.component.css

----------------------------


html, body {
    height: 100%;
    margin: 0;
    font-family: Cursive;
  }

  .background-container {
    background-image: url("../../images/bg.png");
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-size: cover;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    opacity: 0.8; 
    font-family: Cursive;
  }
  
 
  .container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background-color: rgb(70, 152, 219);
    width: 30%;
    height: 70%; 
    border-radius: 10px;
    font-family: Cursive;
    opacity: 0.95;
  }


  button {
    display: block;
    margin: auto;
    background-color: black;
    color: white;
    border: none;
    border-radius: 2px;
    cursor: pointer;
    font-family: Cursive;
  }

  .form-container form {
    display: flex;
    flex-direction: column;
    align-items: right;
    border: 2px solid #000000;
    padding: 2rem;
  }
  
.box{
    border: 2px solid #000000;
    padding: 2rem;
}
  
h2{
    text-align: center;
}
  
  .chatbox {
    display: flex;
    flex-direction: column;
    border: 2px solid #000000;
    background-color: aliceblue;
    border-radius: 5px;
    padding: 20px;
    width: 50%;
    height: 35%;
    overflow-y: scroll;
    margin-bottom: 20px;
  }
  
  .message {
    margin-bottom: 10px;
  }
  
  .sender {
    background-color: #dcf8c6;
    padding: 5px;
    border-radius: 5px;
    margin-bottom: 5px;
  }
  
  .receiver {
    background-color: #dcf8c6;
    padding: 5px;
    border-radius: 5px;
    margin-bottom: 5px;
  }
  
  .text {
    padding: 5px;
    border-radius: 5px;
  }
  


